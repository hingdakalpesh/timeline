@using BlazorTimeline.Client.Models
@using BlazorTimeline.Client.Components.Timeline
@using static BlazorTimeline.Client.Components.Timeline.Map

@if (Route != null)
{
    <h4>Route Details</h4>
    <p>Driver: @Route.Driver.Name</p>
    <p>Vehicle: @Route.Vehicle.Registration</p>
    <p>Number of drops: @Route.Deliveries.Count</p>

    <h5>Planned</h5>
    <div class="details-row">
        @foreach (var delivery in Route.Deliveries)
        {
            <div class="details-tile">
                @delivery.DropNumber. @delivery.StoreName
                <br />
                @delivery.PlannedTime.ToString("HH:mm")
            </div>
        }
    </div>

    <h5>Actual</h5>
    <div class="details-row">
        @for (var i = 0; i < Route.Deliveries.Count; i++)
        {
            var delivery = Route.Deliveries[i];
            var previousDelivery = i > 0 ? Route.Deliveries[i - 1] : null;
            var colorClass = TimelineHelper.GetDeliveryStatusColorClass(delivery, previousDelivery);
            <div class="details-tile @colorClass">
                @delivery.DropNumber. @delivery.StoreName
                <br />
                @(delivery.ActualTime?.ToString("HH:mm") ?? "N/A")
            </div>
        }
    </div>

    <button class="btn btn-primary" @onclick="ToggleMap">
        @(isMapVisible ? "Hide Map" : "Show Map")
    </button>

    @if (isMapVisible && mapMarkers.Any())
    {
        <Map Markers="mapMarkers" />
    }
}

@code {
    [Parameter]
    public Route Route { get; set; }

    private bool isMapVisible = false;
    private List<MapMarker> mapMarkers = new();

    private void ToggleMap()
    {
        isMapVisible = !isMapVisible;
        if (isMapVisible)
        {
            GenerateMapMarkers();
        }
    }

    private void GenerateMapMarkers()
    {
        mapMarkers.Clear();

        // Add markers for stores
        foreach (var delivery in Route.Deliveries)
        {
            mapMarkers.Add(new MapMarker
            {
                Latitude = delivery.StoreLatitude,
                Longitude = delivery.StoreLongitude,
                PopupText = $"Drop {delivery.DropNumber}: {delivery.StoreName}"
            });
        }

        // Add a marker for the driver
        var lastCompletedDelivery = Route.Deliveries.LastOrDefault(d => d.ActualTime.HasValue);
        if (lastCompletedDelivery != null)
        {
            mapMarkers.Add(new MapMarker
            {
                Latitude = lastCompletedDelivery.StoreLatitude,
                Longitude = lastCompletedDelivery.StoreLongitude,
                PopupText = $"Driver: {Route.Driver.Name} (at {lastCompletedDelivery.StoreName})"
            });
        }
    }
}
