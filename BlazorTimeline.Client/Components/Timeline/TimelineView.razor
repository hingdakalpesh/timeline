@using BlazorTimeline.Client.Models
@using BlazorTimeline.Client.Components.Timeline
@using System.Timers
@implements IDisposable

<MudSimpleTable Hover="true">
    <thead>
        <tr>
            <th>Driver/Vehicle</th>
            <th>Timeline</th>
        </tr>
    </thead>
    <tbody>
        @if (Routes != null)
        {
            @foreach (var route in Routes)
            {
                <tr @onclick="() => OnTileClick.InvokeAsync(route)" style="cursor:pointer">
                    <td>
                        <DriverVehicleInfoTile Route="route" />
                    </td>
                    <td style="position: relative; height: 120px;">
                        @foreach (var delivery in route.Deliveries)
                        {
                            var colorClass = TimelineHelper.GetDeliveryStatusColorClass(delivery, route.Deliveries.FirstOrDefault(d => d.DropNumber == delivery.DropNumber - 1));
                            <DeliveryTile Delivery="delivery" StartOfDay="route.PlannedStartTime.Date" ColorClass="@colorClass" />
                        }
                        <div class="current-time-line" style="left: @currentTimePosition%;"></div>
                    </td>
                </tr>
            }
        }
    </tbody>
</MudSimpleTable>
<TimeScale />

@code {
    [Parameter]
    public List<Route> Routes { get; set; }

    [Parameter]
    public EventCallback<Route> OnTileClick { get; set; }

    private double currentTimePosition;
    private Timer timer;

    protected override void OnInitialized()
    {
        SetCurrentTimePosition();
        timer = new Timer(60000); // Update every minute
        timer.Elapsed += (sender, e) => InvokeAsync(() =>
        {
            SetCurrentTimePosition();
            StateHasChanged();
        });
        timer.Start();
    }

    private void SetCurrentTimePosition()
    {
        currentTimePosition = TimelineHelper.CalculateLeftPosition(DateTime.Now, DateTime.Today);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
