@page "/timeline"
@using BlazorTimeline.Client.Models
@using BlazorTimeline.Client.Services
@using BlazorTimeline.Client.Components.Timeline
@inject TimelineService TimelineService
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudGrid Spacing="2" Justify="Justify.Center">
        <MudItem xs="12" sm="6" md="3">
            <MudDatePicker Label="Date" @bind-Date="SelectedDate" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSelect T="int?" Label="Contract" @bind-Value="SelectedContractId">
                <MudSelectItem T="int?" Value="null">All</MudSelectItem>
                @foreach (var contract in contracts)
                {
                    <MudSelectItem T="int?" Value="contract.Id">@contract.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSelect T="int?" Label="Driver" @bind-Value="SelectedDriverId">
                <MudSelectItem T="int?" Value="null">All</MudSelectItem>
                @foreach (var driver in drivers)
                {
                    <MudSelectItem T="int?" Value="driver.Id">@driver.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSelect T="int?" Label="Vehicle" @bind-Value="SelectedVehicleId">
                <MudSelectItem T="int?" Value="null">All</MudSelectItem>
                @foreach (var vehicle in vehicles)
                {
                    <MudSelectItem T="int?" Value="vehicle.Id">@vehicle.Registration</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudPaper Class="mt-4">
        @if (routes == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <TimelineView Routes="routes" OnTileClick="ShowRouteDetails" />
        }
    </MudPaper>
</MudContainer>


@code {
    private List<Route> routes = new();
    private List<Contract> contracts = new();
    private List<Driver> drivers = new();
    private List<Vehicle> vehicles = new();

    private DateTime? selectedDate = DateTime.Today;
    private int? selectedContractId;
    private int? selectedDriverId;
    private int? selectedVehicleId;

    public DateTime? SelectedDate
    {
        get => selectedDate;
        set
        {
            if (selectedDate != value)
            {
                selectedDate = value;
                LoadRoutes();
            }
        }
    }

    public int? SelectedContractId
    {
        get => selectedContractId;
        set
        {
            if (selectedContractId != value)
            {
                selectedContractId = value;
                LoadRoutes();
            }
        }
    }

    public int? SelectedDriverId
    {
        get => selectedDriverId;
        set
        {
            if (selectedDriverId != value)
            {
                selectedDriverId = value;
                LoadRoutes();
            }
        }
    }

    public int? SelectedVehicleId
    {
        get => selectedVehicleId;
        set
        {
            if (selectedVehicleId != value)
            {
                selectedVehicleId = value;
                LoadRoutes();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        contracts = await TimelineService.GetContractsAsync();
        drivers = await TimelineService.GetDriversAsync();
        vehicles = await TimelineService.GetVehiclesAsync();
        await LoadRoutes();
    }

    private async Task LoadRoutes()
    {
        if (selectedDate.HasValue)
        {
            routes = await TimelineService.GetRoutesAsync(selectedDate.Value, selectedContractId, selectedDriverId, selectedVehicleId);
            StateHasChanged();
        }
    }

    private async Task ShowRouteDetails(Route route)
    {
        var parameters = new DialogParameters { ["Route"] = route };
        var dialog = DialogService.Show<RouteDetailsDialog>("Route Details", parameters);
        await dialog.Result;
    }
}
